{
    "page_content": "# Why LangGraph?\u00b6\n\n## LLM applications\u00b6\n\nLLMs make it possible to embed intelligence into a new class of applications. There are many patterns for building applications that use LLMs. Workflows have scaffolding of predefined code paths around LLM calls. LLMs can direct the control flow through these predefined code paths, which some consider to be an \"agentic system\". In other cases, it's possible to remove this scaffolding, creating autonomous agents that can plan, take actions via tool calls, and directly respond to the feedback from their own actions with further actions.\n\n## What LangGraph provides\u00b6\n\nLangGraph provides low-level supporting infrastructure that sits underneath _any_ workflow or agent. It does not abstract prompts or architecture, and provides three central benefits:\n\n### Persistence\u00b6\n\nLangGraph has a persistence layer, which offers a number of benefits:\n\n  * Memory: LangGraph persists arbitrary aspects of your application's state, supporting memory of conversations and other updates within and across user interactions;\n  * Human-in-the-loop: Because state is checkpointed, execution can be interrupted and resumed, allowing for decisions, validation, and corrections via human input.\n\n\n\n### Streaming\u00b6\n\nLangGraph also provides support for streaming workflow / agent state to the user (or developer) over the course of execution. LangGraph supports streaming of both events (such as feedback from a tool call) and tokens from LLM calls embedded in an application.\n\n### Debugging and Deployment\u00b6\n\nLangGraph provides an easy onramp for testing, debugging, and deploying applications via LangGraph Platform. This includes Studio, an IDE that enables visualization, interaction, and debugging of workflows or agents. This also includes numerous options for deployment. \n\n## Comments\n",
    "metadata": {
        "url": "https://langchain-ai.github.io/langgraph/concepts/high_level/",
        "title": "Why LangGraph?",
        "description": "Build language agents as graphs",
        "keywords": "No keywords"
    }
}